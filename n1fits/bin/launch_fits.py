#!/usr/bin/env python
#------------------------------------------------------------------------------
#
# Name       : launch_fits.py
# Written by : Viqar Abbasi / Mohammad Hamza
# Date       : Sept 3, 2019
# Description
#
#  This script will launch a series of processes related to NEOSSat image data
#  starting with the processing of image data which is included in
#  the NEOSSAT VC1 files. The processing software was generated by JF Cuisson
#  and was written in Java. He has provided a file called  JneossatTLM\.jar and
#  this script will be called by the dmtransfer daemon and it will execute
#  the JneossatTLM file as a background task.  Following completion of the Java,
#  image sorting, cleaning and publication will be performed by Python scripts.
#  Finally, FITS statistics will be generated from a Perl program for this 
#  purpose
#
#
#------------------------------------------------------------------------------
#
# REVISION HISTORY:
#  1.00 -               -
#  4.00 - A. Fagarasanu - 2020 Jan 26 - Library directory detection, configuration file, logging
#
import pdb
import sys
import glob
import re
import os
from os import listdir, makedirs, path
from shutil import copy, move
import traceback
import pwd
import logging
import subprocess
import shlex
import time
import datetime
import configparser
config = configparser.ConfigParser()
config.read(path.join(path.abspath(path.dirname(__file__)), 'fits_cleaner/config/n1clean.config'))

from subprocess import Popen, call

#-regen execution flag
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-regen", "--regenerate", dest="regenerate", action="store_true", help="Regenerative reprocessing, delete 'published_lists' and 'unfinished_tlm'")
args = parser.parse_args()
regen = args.regenerate

#Change to paths of device operating from
BIN_PATH = config['fitsconfig']['BIN_PATH']
DATA_PATH = config['fitsconfig']['DATA_PATH']


#Java convertor directory
javadir = BIN_PATH + "fits_processor/JneossatTLM.jar"
java_basedir = DATA_PATH + "image/fits_processor/"

#Java data paths
unfinished_tlm = java_basedir + "data/unfinished_tlm/"
published_lists = java_basedir + "data/published_lists/"
incoming = java_basedir + "incoming/"

#Sorting file directory
sortdir = BIN_PATH + "fits_sorter/n1sort.py"
sort_basedir = DATA_PATH + "image/ "

#Cleaning file directory
cleandir = BIN_PATH + "fits_cleaner/n1clean.py"
clean_basedir = DATA_PATH + "image/fits_cleaner/ "

#Publishing file directory
pubdir = BIN_PATH + "fits_publisher/n1publish.py"
pub_basedir = DATA_PATH + "image/ "

#Stats file directory
statdir = BIN_PATH + "fits_stats/"
data_statdir = DATA_PATH + "image/fits_stats/"

#Specify the directory path of the main pipeline log file
logdir = DATA_PATH + "image/log/"

libExists = True

if (__name__ == "__main__"):
    try:

        if not os.path.exists(DATA_PATH + "image/fits_processor"):
            libExists = False
            makedirs(DATA_PATH + "image/fits_processor")
            if not os.path.exists(DATA_PATH + "image/fits_processor/incoming"):
                makedirs(DATA_PATH + "image/fits_processor/incoming")
            if not os.path.exists(DATA_PATH + "image/fits_processor/outgoing"):
                makedirs(DATA_PATH + "image/fits_processor/outgoing")
                makedirs(DATA_PATH + "image/fits_processor/outgoing/ASTRO")
            if not os.path.exists(DATA_PATH + "image/fits_processor/log"):
                makedirs(DATA_PATH + "image/fits_processor/log")
                
        if not os.path.exists(logdir):
            makedirs(logdir)

        #pdb.set_trace()
        # -- Create the logger.
        
        logger = logging.getLogger("n1 Image Processor")
        logger.setLevel(logging.INFO)
        
        # --- Create the logging file handler. Append the data
        # --- to a file in the /image/log directory.
        
        log_file = logdir + "n1FITSProcessor" + datetime.datetime.utcnow().strftime("%Y%j%H%M%S")
        fh = logging.FileHandler(log_file)
        
        # --- Add handler to logger object
        
        logger.addHandler( fh )
        
        os.chdir(DATA_PATH + "image/fits_processor/")
        
        logger.info("\n************************************************************************")
        logger.info("************************************************************************")

        # -- Format the output.
        
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        fh.setFormatter(formatter)

        # -- Delete "published_lists" for -regen flag
        if regen:

            pubFiles = []

            for file in listdir(incoming):
                if file.endswith(".DC1") or file.endswith(".VC1"):
                    pubFiles.append(file + ".LIST")

            if os.path.exists(published_lists):
                if len(listdir(published_lists)) != 0:
                    for file in listdir(published_lists):
                        if file in pubFiles:
                            os.remove(published_lists + file)

        # -- Copy new incoming SSCLOGs to stats_in directory before FITS Processor moves them; in preperation for Stats Pack
        for file in listdir(incoming):
            if file.endswith(".SSCLOG"):
                if not os.path.exists(data_statdir + "incoming/"):
                    makedirs(data_statdir + "incoming/")
                copy(incoming + file, data_statdir + "incoming/" + file)

                
        # -- and start the execution. If you want to run as a sub-process
        cmdLine = "java -jar " + javadir + " -batch TRUE -basedir " + java_basedir

        #pdb.set_trace()
        env = dict(os.environ)

        print("\nRunning FITS processor...")

        # -- Call the Java program
        logger.info("(1) Java FITS processor start...")
        #subprocess.Popen ([cmdLine],shell=True,env=env)
        
        #----------------------------------------------------------------------
        # -- If you want to run it and capture the output (while blocking
        # -- transfer then you should comment the above command and  uncomment
        # -- the following three lines.
        #----------------------------------------------------------------------
        p = subprocess.Popen ([cmdLine], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, universal_newlines=True, env=env)
        stdout = p.communicate()

        # -- Subprocess STDERR is being fed in the same PIPE as STDOUT
        logger.info("\n-----------------------------\nJava FITS STDOUT...\n")
        logger.info(stdout[0])
        logger.info("\n-----------------------------\n")
        
        # -- Before passing to FITS Sorter, we want ensure FITSLOG files are copied and moved in preperation for publishing and Stats Pack
        for file in listdir(java_basedir + "/log/"):
            if file.endswith(".FITSLOG"):
                if not os.path.exists(data_statdir + "incoming/"):
                    makedirs(data_statdir + "incoming/")
                copy(java_basedir + "/log/" + file, data_statdir + "incoming/" + file)
                move(java_basedir + "/log/" + file, logdir + file)

        # -- Once the java program has completed, call the sorter program
        logger.info("(2) FITS Sorter start...")
        time_start = time.time()
        if not libExists:
            print("\nCreating libraries...\n")
        exit_code_sorter = call("python3 " + sortdir +  " -basedir " + sort_basedir + log_file, shell=True)
        
        # -- Once the sorter is completed, call the cleaner program
        logger.info("(3) FITS Cleaner start...")
        exit_code_cleaner = call("python3 " + cleandir + " -basedir " + clean_basedir + log_file, shell=True)
        
        # -- Once the cleaner is completed, call the publisher program
        logger.info("(4) FITS Publisher start...")
        exit_code_publisher = call("python3 " + pubdir + " -basedir " + pub_basedir, shell=True)

        if libExists:
            # -- Once the publisher is completed, call the stats pack
            logger.info("(5) FITS Stats start...")
            print("\nGenerating Stats reports...")
            os.chdir(statdir)
            call("perl n1stats.pl -parse -daily >> " + log_file, shell=True)

        end_time = time.time() - time_start

        if (end_time > 60):
            end_time = round((end_time/60), 2)
            units = "minutes."
        else:
            end_time = round((end_time), 2)
            units = "seconds."

        if libExists:
            print ("\nProcessing complete. Total runtime is",end_time,units)
        
    except:
        # -- Top level exception to handle any misc errors which occur.
        # print "Exception Detected"
        logger.info("Image processing Exception Detected...\n" + str(sys.exc_info()[0]) + " occured.")
        tracebackString = traceback.format_exc()
        logger.info(tracebackString)

